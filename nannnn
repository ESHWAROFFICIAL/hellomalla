<div id="app">
  <div style="margin: auto">
    <div class="image-wrapper">
      <img :src="img.src" alt="img.alt" />
      <header>
        <h1>{{ title }}</h1>
        <p>{{subtitle}}</p>
      </header>
    </div>
  </div>
  <section class="step-by-step">
    <canvas id="c"></canvas>
    <section>
      <h2>You will need:</h2>
      <ul>
        <li class="ingredient" v-for="(ingredient, i) in ingredients">
          <label :key="i">
            <input type="checkbox" v-model="ingredient.completed" />
            <div>
              <span class="qty">{{ ingredient.qt }}</span>
              <span>{{ ingredient.text }}</span>
            </div>
          </label>
        </li>
      </ul>
    </section>
    <h2>Step by step ({{ completedCount }} of {{ todos.length }})</h2>
    <ol>
      <transition-group name="slide-fade">
        <li v-if="i <= completedCount" v-for="(todo, i) in todos" :key="i" class="list" :class="{ completed: todo.completed }">
          <!-- Show Label -->
          <label class="todo-label">
            <input type="checkbox" v-model="todo.completed" />
            <svg version="1.1" viewBox="0 0 24 24">
              <circle class="todo-box" cx="12" cy="12" r="8"></circle>
              <path class="todo-check" d="M8.5 12.5l2 2 5-5"></path>
              <circle class="todo-circle" cx="12" cy="12" r="10"></circle>
            </svg>
            <div class="text" :class="{ completed: todo.completed }">
              {{ todo.text }}
            </div>
          </label>
        </li>
      </transition-group>
    </ol>
    <transition name="slide-fade">
      <button class="reset" v-if="completedCount === todos.length" @click="reset" type="button">
        Reset
      </button>
    </transition>
  </section>
</div>




html




#app {
  --dark: #140a06;
  --light: #fffde7;
  --accent: #ff5533;
  --dots-gap: 12px;
  box-sizing: border-box;
  background: var(--dark);
  color: var(--light);
  min-height: 100vh;
  font-family: Arima Madurai, serif;
  line-height: 1.5;
  letter-spacing: 1px;
  overflow-x: hidden;
  padding: 2.5rem;
}
#app:after {
  content: "";
  position: fixed;
  margin: auto;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  border: 0.5rem solid var(--light);
  pointer-events: none;
}

#app *,
#app *:before,
#app *:after {
  box-sizing: inherit;
}
.image-wrapper {
  width: 100%;
  height: 40vw;
  position: relative;
}
.image-wrapper:before {
  content: "";
  position: absolute;
  top: -10%;
  bottom: -10%;
  left: -10%;
  right: -10%;
  background: radial-gradient(transparent, var(--dark) 70%);
}
img {
  height: 120%;
  width: 120%;
  object-fit: cover;
  margin: -10%;
}
header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  text-align: center;
}
h1 {
  font-size: 2.5rem;
  margin-bottom: 0;
}
h1 + p {
  margin-top: 0;
  color: var(--accent);
}
.step-by-step {
  position: relative;
  max-width: 35rem;
  margin: auto;
}
h2 {
  color: var(--accent);
  margin-bottom: 0;
}
ul,
ol {
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin: 0 0 1.5rem;
}
li {
  padding: 0.5rem 0;
  position: relative;
}
li:after {
  content: "";
  position: absolute;
  left: 0;
  right: -1rem;
  bottom: 0;
  height: 1px;
  background-image: linear-gradient(90deg, var(--accent) 10%, transparent 0);
  background-size: var(--dots-gap) 100%;
  background-position: 0 0;

  will-change: transform;
}
.qty {
  color: var(--accent);
}

.todo-label {
  display: flex;
  align-items: center;
}
[type="checkbox"] {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}
.slide-fade-enter-active {
  transition: all 1s ease;
}
.slide-fade-leave-active {
  transition: all 0.5s;
}
.slide-fade-enter,
.slide-fade-leave-to {
  transform: translateY(2rem);
  opacity: 0;
}
.slide-fade-leave-to {
  transform: translateY(-2rem);
}
.reset {
  font-family: inherit;
  font-size: 1.25rem;
  border: none;
  box-shadow: none;
  background: var(--accent);
  color: var(--dark);
  display: block;
  width: 4rem;
  height: 4rem;
  padding: 0;
  margin: auto;
  border-radius: 50%;
  cursor: pointer;
  transition: 1s;
  z-index: 101;
}
.reset:hover {
  background: var(--light);
}
svg {
  color: var(--accent);
  fill: none;
  stroke: currentColor;
  stroke-width: 1;
  width: 2rem;
  height: 2rem;
  min-width: 2rem;
  margin-right: 1rem;
  flex: 0 0 2rem;
}
.todo-box {
  fill: rgba(238, 136, 114, 0);
  stroke-width: 1;
  transition: stroke 0.8s, fill 0.8s;
  transition-delay: 0.6s, 0.4s;
}
:checked + * .todo-box {
  fill: currentColor;
  stroke: currentColor;
  transition-delay: 0s, 0.2s;
}
.todo-check {
  stroke: var(--dark);
  stroke-dasharray: 10, 10;
  stroke-dashoffset: 10;
  transition: stroke-dashoffset 0.56s cubic-bezier(0.9, 0, 0.5, 1), fill 0.56s;
}
:checked + * .todo-check {
  stroke-dashoffset: 0;
  transition-duration: 0.32s;
  transition-delay: 0.2s;
}
.todo-circle {
  stroke: white;
  stroke-dasharray: 1 6;
  stroke-width: 0;
  transform-origin: 12px 12px;
  transform: scale(0.4) rotate(0);
  animation: 0.8s linear none;
  animation-delay: 0.48s;
  animation-duration: 0.56s;
}
:checked + * .todo-circle {
  animation-name: explode;
}
@keyframes explode {
  30% {
    stroke-dasharray: 2 2;
    stroke-width: 2;
    transform: scale(0.8) rotate(0);
  }
  100% {
    stroke-dasharray: 1 2;
    stroke-width: 0;
    transform: scale(1.1) rotate(0);
  }
}

.ingredient div {
  position: relative;
  background-image: linear-gradient(var(--light), var(--light));
  background-size: 30rem 1px;
  background-position: -30rem 50%;
  background-repeat: no-repeat;
  display: inline;
  transition: 1s;
}

.ingredient :checked + div {
  background-position: 0 50%;
}

canvas {
  position: fixed;
  top: 0;
  left: calc(50% - 25rem);
  z-index: 100;
  pointer-events: none;
}
@media (min-width: 55em) {
  #app {
    padding: 0 2rem 0 40vw;
  }
  .image-wrapper {
    position: fixed;
    margin: auto;
    top: 0;
    bottom: 0;
    left: 0;
    width: 40vw;
    height: 40vw;
  }
  .step-by-step {
    margin: 2rem 0;
  }
  .reset {
    position: fixed;
    bottom: 2rem;
    left: 2rem;
  }
  canvas {
    left: calc(40vw - 5rem);
  }
}




css





new Vue({
  el: "#app",
  data() {
    return {
      title: "Mystic Naans",
      subtitle: "makes 10 breads",
      img: {
        src: "https://s3-us-west-2.amazonaws.com/s.cdpn.io/74321/naan.jpg",
        alt: "Pancakes"
      },
      ingredients: [
        {
          text: "flour",
          qt: "500g",
          completed: false
        },
        {
          text: "plain yogurt",
          qt: "125g",
          completed: false
        },
        {
          text: "water",
          qt: "18cl",
          completed: false
        },
        {
          text: "active dry yeast",
          qt: "2Â¼ teaspoons",
          completed: false
        },
        {
          text: "olive oil",
          qt: "3 tablespoons",
          completed: false
        },
        {
          text: "sugar",
          qt: "1 teaspoon",
          completed: false
        },
        {
          text: "salt",
          qt: "1 teaspoon",
          completed: false
        }
      ],
      todos: [
        {
          text:
            "Prepare a large bowl, clean cloth, wooden dough roller (or alike), a frying pan with a lid and all ingredients.",
          completed: false
        },
        {
          text:
            "In the bowl, mix the flour, salt and sugar. Add the oil, yeast, yogurt and half the water. Knead by hand, gradually adding water. Make sure to knead your dough for at least 10 minutes.",
          completed: false
        },
        {
          text:
            "Let the dough rise in a warm place covered with a cloth for at least one hour.",
          completed: false
        },
        {
          text:
            "Flour the table and pour the dough out on it. Divide the dough in 10 and roll the dough between your hands to form balls.",
          completed: false
        },
        {
          text: "Roll the dough ball out (approx. 18cm of diameter)",
          completed: false
        },
        {
          text: "Heat a very lightly oiled frying pan over medium high heat.",
          completed: false
        },
        {
          text:
            "Transfer the naan into the pan and let it puff up for 2-3 minutes covered with a lid. Turn  over and fry for 2 more minutes uncovered.",
          completed: false
        },
        {
          text: "Eat, smile & share.",
          completed: false
        }
      ],
      isActive: false
    };
  },

  computed: {
    completedCount() {
      return this.todos.filter(todo => todo.completed).length;
    }
  },

  mounted() {
    var c = document.getElementById("c");
    this.width = 800;
    this.height = window.innerHeight;
    c.width = this.width;
    c.height = this.height;
    console.log("this", this);
    var ctx = c.getContext("2d");
    this.vueCanvas = ctx;
  },

  watch: {
    completedCount: {
      handler(after, before) {
        if (after > before) {
          if (!this.isActive) {
            this.addFlour();
            this.vueCanvas.fillStyle = Math.random() > 0.6 ? "#ff5533" : "#fff";
            this.update();
          }
        }
      }
    }
  },

  methods: {
    reset() {
      this.todos.forEach(el => {
        console.log(el);
        el.completed = false;
      });
      this.ingredients.forEach(el => {
        el.completed = false;
      });
    },
    generateGaussian(mean, std) {
      let v1, v2, s;
      do {
        v1 = 2 * Math.random() - 1;
        v2 = 2 * Math.random() - 1;
        s = v1 * v1 + v2 * v2;
      } while (s >= 1 || s == 0);
      const multiplier = Math.sqrt((-2 * Math.log(s)) / s);
      console.log(v1 * multiplier * std + mean);
      return v1 * multiplier * std + mean;
    },
    addFlour() {
      const meanYOffset = -200;
      const stdYOffset = 100;
      this.flour = [];
      this.flour.push({
        x: this.width / 2,
        y: meanYOffset - 3 * stdYOffset,
        vy: 10,
        vx: 0.5,
        r: 0.5,
        o: 0.5
      });
      for (let i = 1; i < 800; i++) {
        this.flour.push({
          x: this.generateGaussian(this.width / 2, this.width / 8),
          y: this.generateGaussian(meanYOffset, 100),
          vy: 10 + Math.random() * 10,
          vx: 0.5 - Math.random(),
          r: 0.5 + Math.random() * 1,
          o: 0.5 + Math.random() * 0.5
        });
      }
    },
    update() {
      this.vueCanvas.clearRect(0, 0, this.width, this.height);
      this.flour.forEach(flake => {
        flake.y += flake.vy;
        flake.x += flake.vx;

        this.vueCanvas.globalAlpha = flake.o;
        this.vueCanvas.beginPath();
        this.vueCanvas.arc(flake.x, flake.y, flake.r, 0, Math.PI * 2, false);
        this.vueCanvas.closePath();
        this.vueCanvas.fill();
      });

      if (this.flour[0].y < 1 * this.height) {
        this.isActive = true;
        window.requestAnimationFrame(this.update);
      } else {
        this.vueCanvas.clearRect(0, 0, this.width, this.height);
        this.isActive = false;
      }
    }
  }
});




js
